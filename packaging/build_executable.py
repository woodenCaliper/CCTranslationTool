"""Utilities for packaging CCTranslationTool as a single Windows executable."""

from __future__ import annotations

import shutil
import subprocess
import sys
from pathlib import Path


REPO_ROOT = Path(__file__).resolve().parents[1]
OUTPUT_DIR = REPO_ROOT / "package"
EXECUTABLE_NAME = "CCTranslationTool.exe"


def _check_platform() -> None:
    """Ensure the script is executed on Windows."""

    if sys.platform != "win32":
        raise SystemExit(
            "PyInstaller can only build a native Windows executable on Windows. "
            "Please run this script from a Windows environment."
        )


def _ensure_pyinstaller() -> None:
    """Validate that PyInstaller is available before attempting the build."""

    try:
        import PyInstaller  # noqa: F401  # type: ignore
    except ModuleNotFoundError as exc:  # pragma: no cover - dependency check
        raise SystemExit(
            "PyInstaller is required. Install it with `pip install pyinstaller`."
        ) from exc


def build() -> Path:
    """Create a one-file executable using PyInstaller.

    Returns the path to the generated executable.
    """

    _check_platform()
    _ensure_pyinstaller()

    command = [
        sys.executable,
        "-m",
        "PyInstaller",
        "--clean",
        "--noconfirm",
        "--noconsole",
        "--onefile",
        "--name",
        EXECUTABLE_NAME.replace(".exe", ""),
        str(REPO_ROOT / "translator_app.py"),
    ]

    subprocess.run(command, check=True, cwd=REPO_ROOT)

    dist_dir = REPO_ROOT / "dist"
    executable_path = dist_dir / EXECUTABLE_NAME
    if not executable_path.exists():
        raise SystemExit(
            "PyInstaller did not produce the expected executable at "
            f"{executable_path!s}."
        )

    OUTPUT_DIR.mkdir(exist_ok=True)
    final_path = OUTPUT_DIR / EXECUTABLE_NAME
    shutil.move(str(executable_path), final_path)

    # Remove temporary build artefacts generated by PyInstaller.
    shutil.rmtree(REPO_ROOT / "build", ignore_errors=True)
    shutil.rmtree(dist_dir, ignore_errors=True)
    spec_file = REPO_ROOT / f"{EXECUTABLE_NAME.replace('.exe', '')}.spec"
    if spec_file.exists():
        spec_file.unlink()

    return final_path


if __name__ == "__main__":  # pragma: no cover - manual execution entrypoint
    path = build()
    print(f"Executable created at {path}")
